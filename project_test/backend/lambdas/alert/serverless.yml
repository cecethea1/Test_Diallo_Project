# Service Name
service: alertsmodule
provider:
  name: aws
  runtime: nodejs12.x
  vpc:
    securityGroupIds:
      - ${file(./config.${self:provider.stage}.yml):VPC_SG_GROUP_ID}
    subnetIds:
      - ${file(./config.${self:provider.stage}.yml):VPC_PRIVATE_SUBNET_A}
  deploymentBucket:
    name: alerts-module
  stage: dev
  region: us-west-2
  accountId: ${file(./config.${self:provider.stage}.yml):ACCOUNT_ID}
  environment:
    PGHOST: ${file(./config.${self:provider.stage}.yml):PGHOST}
    PGUSER: ${file(./config.${self:provider.stage}.yml):PGUSER}
    PGPASSWORD: ${file(./config.${self:provider.stage}.yml):PGPASSWORD}
    PGDATABASE: ${file(./config.${self:provider.stage}.yml):PGDATABASE}
    PGPORT: ${file(./config.${self:provider.stage}.yml):PGPORT}
    ACCOUNT_ID: ${file(./config.${self:provider.stage}.yml):ACCOUNT_ID}
    QUEUE_NAME: ${file(./config.${self:provider.stage}.yml):QUEUE_NAME}
    REGION: ${file(./config.${self:provider.stage}.yml):REGION}
    TWILIO_ACCOUNT_SID: ${file(./config.${self:provider.stage}.yml):TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${file(./config.${self:provider.stage}.yml):TWILIO_AUTH_TOKEN}
    TWILIO_PHONE_NUMBER: ${file(./config.${self:provider.stage}.yml):TWILIO_PHONE_NUMBER}
    TWILIO_SERVICE_SID: ${file(./config.${self:provider.stage}.yml):TWILIO_SERVICE_SID}
    SENDGRID_API_KEY: ${file(./config.${self:provider.stage}.yml):SENDGRID_API_KEY}
    SENDGRID_EMAIL_SENDER: ${file(./config.${self:provider.stage}.yml):SENDGRID_EMAIL_SENDER}
    SENDGRID_TEMPLATE_ID: ${file(./config.${self:provider.stage}.yml):SENDGRID_TEMPLATE_ID}
    WEB_PUSH_CONTACT: ${file(./config.${self:provider.stage}.yml):WEB_PUSH_CONTACT}
    PUBLIC_VAPID_KEY: ${file(./config.${self:provider.stage}.yml):PUBLIC_VAPID_KEY}
    PRIVATE_VAPID_KEY: ${file(./config.${self:provider.stage}.yml):PRIVATE_VAPID_KEY}
    NODE_PATH: "./:/opt/node_modules"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        - Fn::GetAtt: [alertsQueue, Arn]
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:${self:provider.accountId}:*"
package: # Optional deployment packaging configuration
  excludeDevDependencies: true
  exclude: # Specify the directories and files which should be excluded in the deployment package
    - config.dev.yml
    - config.prod.yml
    - config.test.yml
    - .gitignore
    - lib/**
custom:
  serverless-offline-sqs:
    autoCreate: true                 # create queue if not exists
    apiVersion: '2020-06-15'
    endpoint: http://0.0.0.0:9324
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
layers:
  libNodeModule:
    path: lib
    description: "additional node_module (pg, twilio, ajv, @sendgrid/mail)" # optional, Description to publish to AWS
    compatibleRuntimes:
      - nodejs12.x
functions:
  alertCatcher:
    handler: handler.alertCatcher
    description: manage alerts from database and send to queue alerts
    timeout: 30
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: LibNodeModuleLambdaLayer }
    events:
      - schedule:
          rate: cron(0/1 * * * ? *) # Run every 1 minute
          name: alert-sender-event
          description: "this event will trigger lambda alertCatcher every 1 minute"
          enabled: false # change value to true to activate event
  alertDistributer:
    handler: handler.alertDistributer
    description: distributing the ALERT range from the Queue
    timeout: 60
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: LibNodeModuleLambdaLayer }
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ${file(./config.${self:provider.stage}.yml):QUEUE_NAME}
              - Arn
          batchSize: 1
resources:
  Resources:
    alertsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: alertsQueue
    VPCGatewayAttachmentLambda:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: ${file(./config.${self:provider.stage}.yml):VPC_ID}
        InternetGatewayId: ${file(./config.${self:provider.stage}.yml):VPC_INTERNET_GATEWAY_ID}
    SubnetRouteTableAssociationLambdaPrivateA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: ${file(./config.${self:provider.stage}.yml):VPC_PRIVATE_SUBNET_A}
        RouteTableId: ${file(./config.${self:provider.stage}.yml):VPC_PRIVATE_ROUTE_TABLE_A}
    SubnetRouteTableAssociationLambdaPublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: ${file(./config.${self:provider.stage}.yml):VPC_PUBLIC_SUBNET_A}
        RouteTableId: ${file(./config.${self:provider.stage}.yml):VPC_PUBLIC_ROUTE_TABLE_A}